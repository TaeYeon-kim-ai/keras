'''
Cnn2D(10,(2,2), input_shape(5,5(이미지 조각),1(흑백gray scale /  칼라=3(RGB)) )

ex)
Conv2D(32, (5, 5), padding='valid', input_shape=(28, 28, 1), activation='relu')
첫번째 인자 : 컨볼루션 필터의 수 입니다.
두번째 인자 : 컨볼루션 커널의 (행, 열) 입니다.
padding : 경계 처리 방법을 정의합니다.
‘valid’ : 유효한 영역만 출력이 됩니다. 따라서 출력 이미지 사이즈는 입력 사이즈보다 작습니다.
‘same’ : 출력 이미지 사이즈가 입력 이미지 사이즈와 동일합니다.
input_shape : 샘플 수를 제외한 입력 형태를 정의 합니다. 모델에서 첫 레이어일 때만 정의하면 됩니다.
(행, 열, 채널 수)로 정의합니다. 흑백영상인 경우에는 채널이 1이고, 컬러(RGB)영상인 경우에는 채널을 3으로 설정합니다.
activation : 활성화 함수 설정합니다.
‘linear’ : 디폴트 값, 입력뉴런과 가중치로 계산된 결과값이 그대로 출력으로 나옵니다.
‘relu’ : rectifier 함수, 은익층에 주로 쓰입니다.
‘sigmoid’ : 시그모이드 함수, 이진 분류 문제에서 출력층에 주로 쓰입니다.
‘softmax’ : 소프트맥스 함수, 다중 클래스 분류 문제에서 출력층에 주로 쓰입니다.
입력 형태는 다음과 같습니다.

image_data_format이 ‘channels_first’인 경우 (샘플 수, 채널 수, 행, 열)로 이루어진 4D 텐서입니다.
image_data_format이 ‘channels_last’인 경우 (샘플 수, 행, 열, 채널 수)로 이루어진 4D 텐서입니다.
'''

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, Dense, Flatten, MaxPooling2D

model = Sequential()
model.add(Conv2D(filters = 10, kernel_size=(2,2), strides =1 ,padding = 'same', input_shape = (10,10,1))) 
#10개 필터, 커널2,2로 잘라서 특징추출, 인풋데이터 사이즈 n(batch_size), 10, 10, 1 #4차원
#padding same은 출력사이즈와 입력사이즈가 동일
#strides = 2 : 2만 큼 건너뛰어서 인식해라 #세로로도 건너뛸 수 있음.
model.add(MaxPooling2D(pool_size=(2))) #디폴트 2(pool_size=2)  // pool_size=(2,2) //pool_size=(2,3)
model.add(Conv2D(9, (2,2), padding = 'valid')) #차원 
#padding = valid : 유효한 영역만 출력
# model.add(Conv2D(9, (2,3))) #차원
# model.add(Conv2D(8, 2)) #(2,2 -> 2라고 써도 2 by 2로 인식) #차원
model.add(Flatten()) #Flatten 평평하게 빼는 작업 #2차원
model.add(Dense(1))

model.summary()


"""
N, 5, 5, 1

Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 9, 9, 10)          50
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 8, 8, 9)           369
_________________________________________________________________
flatten (Flatten)            (None, 576)               0
_________________________________________________________________
dense (Dense)                (None, 1)                 577
=================================================================
Total params: 996
Trainable params: 996
Non-trainable params: 0
=================================================================
Flatten : model.add(Flatten()) # 평평하게 빼는 작업                /// LSTM = 3차원 - 차원
N, 25 로 변환

Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 9, 9, 10)          50
_________________________________________________________________
flatten (Flatten)            (None, 810)               0
_________________________________________________________________
dense (Dense)                (None, 1)                 811
=================================================================
Total params: 861
Trainable params: 861
Non-trainable params: 0

#padding 적용
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 10, 10, 10)        50
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 9, 9, 9)           369
_________________________________________________________________
flatten (Flatten)            (None, 729)               0
_________________________________________________________________
dense (Dense)                (None, 1)                 730
=================================================================

#strides = 2적용 : 얼마나 건너뛰어서 찍을것인가
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 5, 5, 10)          50
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 4, 4, 9)           369
_________________________________________________________________
flatten (Flatten)            (None, 144)               0
_________________________________________________________________
dense (Dense)                (None, 1)                 145
=================================================================
Total params: 564
Trainable params: 564
Non-trainable params: 0


#MaxPooling
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 5, 5, 10)          50
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 2, 2, 10)          0
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 1, 1, 9)           369
_________________________________________________________________
flatten (Flatten)            (None, 9)                 0
_________________________________________________________________
dense (Dense)                (None, 1)                 10
=================================================================
"""